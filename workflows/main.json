{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d94d2139-d6e1-4e1c-98da-6297aa43ed3a",
      "name": "Webhook WhatsApp",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1000,
        0
      ],
      "webhookId": "whatsapp"
    },
    {
      "parameters": {
        "jsCode": "// ===================================================================\n// PROCESSADOR DE CONTEXTO PARA IA - WhatsApp Bot\n// ===================================================================\n// Este c√≥digo processa mensagens recebidas e prepara contexto \n// inteligente para a IA responder como voc√™ (persona pessoal)\n// ===================================================================\n\n// Processar mensagem recebida e preparar para IA\nconst data = $input.first().json.body;\nconsole.log('üì• Dados recebidos do WhatsApp:', JSON.stringify(data, null, 2));\n\n// ===================================================================\n// EXTRA√á√ÉO E VALIDA√á√ÉO DE DADOS\n// ===================================================================\n\nconst from = data.from || '';\nconst fromName = data.fromName || 'Usu√°rio';\nconst message = data.message || '';\nconst history = data.history || [];\nconst messageId = data.messageId || '';\nconst timestamp = data.timestamp || new Date().toISOString();\n\n// Valida√ß√µes b√°sicas\nif (!from || !message) {\n    console.error('‚ùå Dados inv√°lidos - from ou message ausentes');\n    return { json: { error: 'Dados inv√°lidos' } };\n}\n\nconsole.log('üì± Remetente:', fromName, '(' + from + ')');\nconsole.log('üí¨ Mensagem:', message);\nconsole.log('üìö Hist√≥rico dispon√≠vel:', history.length, 'mensagens');\nconsole.log('üïê Timestamp:', timestamp);\n\n// ===================================================================\n// VERIFICA√á√ÉO DE PREFIXO BOT\n// ===================================================================\n\n// Verificar se a mensagem come√ßa com \"bot\" (case insensitive)\nconst messageText = message.trim();\nconst startsWithBot = /^bot\\s+/i.test(messageText);\n\nconsole.log('ü§ñ Verifica√ß√£o de prefixo \"bot\":', startsWithBot);\n\n// Se n√£o come√ßa com \"bot\", retornar sem processar para IA\nif (!startsWithBot) {\n    console.log('‚è≠Ô∏è Mensagem n√£o direcionada para bot - ignorando processamento IA');\n    return {\n        json: {\n            shouldProcessAI: false,\n            reason: 'Mensagem n√£o cont√©m prefixo \"bot\"',\n            originalMessage: message,\n            from: from,\n            fromName: fromName,\n            messageId: messageId,\n            timestamp: timestamp\n        }\n    };\n}\n\n// Remover o prefixo \"bot\" da mensagem para processamento\nconst cleanMessage = messageText.replace(/^bot\\s+/i, '').trim();\nconsole.log('üßπ Mensagem limpa (sem prefixo):', cleanMessage);\n\n// Validar se ainda h√° conte√∫do ap√≥s remover prefixo\nif (!cleanMessage) {\n    console.log('‚ùå Mensagem vazia ap√≥s remover prefixo \"bot\"');\n    return {\n        json: {\n            shouldProcessAI: false,\n            reason: 'Mensagem vazia ap√≥s remover prefixo \"bot\"',\n            originalMessage: message,\n            from: from,\n            fromName: fromName,\n            messageId: messageId,\n            timestamp: timestamp\n        }\n    };\n}\n\n// ===================================================================\n// AN√ÅLISE DO CONTEXTO E HIST√ìRICO\n// ===================================================================\n\n// Analisar padr√µes no hist√≥rico\nconst historyAnalysis = analyzeHistory(history);\nconsole.log('üîç An√°lise do hist√≥rico:', historyAnalysis);\n\n// Construir contexto inteligente\nlet contextMessages = [];\n\n// ===================================================================\n// SISTEMA DE PROMPTS PERSONALIZADOS\n// ===================================================================\n\n// Prompt principal que define sua persona\nconst systemPrompt = `Voc√™ √© Kaian, uma pessoa real respondendo suas mensagens pessoais do WhatsApp. \n\nINSTRU√á√ïES CR√çTICAS:\n- Responda SEMPRE como se fosse voc√™ mesmo (Kaian) falando\n- Use o hist√≥rico da conversa como CONTEXTO PESSOAL da sua rela√ß√£o com ${fromName}\n- Mantenha consist√™ncia com conversas anteriores\n- Responda de forma natural, como em uma conversa real do WhatsApp\n- Use linguagem casual, emojis quando apropriado\n- Seja aut√™ntico e pessoal, n√£o rob√≥tico\n\nCONTEXTO DA CONVERSA:\n- Voc√™ est√° conversando com: ${fromName}\n- Tipo de relacionamento: ${determineRelationshipType(fromName, history)}\n- Hist√≥rico de mensagens: ${history.length} mensagens anteriores\n- Tom da conversa: ${historyAnalysis.tone}\n- T√≥picos recorrentes: ${historyAnalysis.topics.join(', ') || 'Nenhum identificado'}\n\nIMPORTANTE: Use o hist√≥rico abaixo para entender o contexto e manter coer√™ncia na conversa.`;\n\n// Adicionar prompt do sistema\ncontextMessages.push({\n    role: 'system',\n    content: systemPrompt\n});\n\n// ===================================================================\n// PROCESSAMENTO DO HIST√ìRICO\n// ===================================================================\n\nif (history.length > 0) {\n    console.log('üìñ Processando hist√≥rico para contexto...');\n    \n    // Adicionar resumo do hist√≥rico se muito longo\n    if (history.length > 15) {\n        const summary = summarizeHistory(history);\n        contextMessages.push({\n            role: 'system',\n            content: `RESUMO DA CONVERSA ANTERIOR: ${summary}`\n        });\n        \n        // Adicionar apenas as √∫ltimas 10 mensagens para contexto imediato\n        const recentHistory = history.slice(-10);\n        recentHistory.forEach(msg => {\n            contextMessages.push({\n                role: msg.from === 'bot' ? 'assistant' : 'user',\n                content: msg.text\n            });\n        });\n        \n        console.log('üìù Hist√≥rico resumido + √∫ltimas 10 mensagens adicionadas');\n    } else {\n        // Adicionar todo o hist√≥rico se n√£o for muito longo\n        history.forEach(msg => {\n            contextMessages.push({\n                role: msg.from === 'bot' ? 'assistant' : 'user',\n                content: msg.text\n            });\n        });\n        \n        console.log('üìù Todo o hist√≥rico adicionado ao contexto');\n    }\n} else {\n    // Primeira intera√ß√£o - prompt especial\n    contextMessages.push({\n        role: 'system',\n        content: `Esta √© a primeira mensagem de ${fromName}. Responda de forma acolhedora e natural, como se fosse o in√≠cio de uma conversa pessoal.`\n    });\n    \n    console.log('üÜï Primeira intera√ß√£o detectada');\n}\n\n// ===================================================================\n// ADI√á√ÉO DA MENSAGEM ATUAL\n// ===================================================================\n\n// Prompt de contexto imediato (usando mensagem limpa)\nconst immediateContextPrompt = `${fromName} acabou de enviar: \"${cleanMessage}\"\n\nResponda como Kaian, considerando:\n- Seu relacionamento com ${fromName}\n- O contexto da conversa anterior\n- O tom e estilo natural de suas respostas\n- Seja genu√≠no e pessoal, n√£o formal ou rob√≥tico\n\nResposta:`;\n\ncontextMessages.push({\n    role: 'user',\n    content: immediateContextPrompt\n});\n\n// ===================================================================\n// ESTAT√çSTICAS E LOGS FINAIS\n// ===================================================================\n\nconst stats = {\n    totalMessages: contextMessages.length,\n    historyUsed: history.length,\n    relationshipType: determineRelationshipType(fromName, history),\n    conversationTone: historyAnalysis.tone,\n    hasContext: history.length > 0,\n    prefixDetected: true,\n    cleanMessage: cleanMessage\n};\n\nconsole.log('üß† Contexto preparado:', stats);\nconsole.log('üìä Mensagens no contexto:', contextMessages.length);\n\n// ===================================================================\n// RETORNO ESTRUTURADO\n// ===================================================================\n\nreturn {\n    json: {\n        // Indicador de que deve processar IA\n        shouldProcessAI: true,\n        \n        // Dados para envio\n        to: from,\n        toName: fromName,\n        originalMessage: message,\n        cleanMessage: cleanMessage, // Mensagem sem prefixo \"bot\"\n        messageId: messageId,\n        \n        // Contexto para IA\n        contextMessages: contextMessages,\n        \n        // Metadados\n        metadata: {\n            timestamp: timestamp,\n            historyCount: history.length,\n            relationshipType: stats.relationshipType,\n            conversationTone: stats.conversationTone,\n            isFirstInteraction: history.length === 0,\n            contextQuality: history.length > 5 ? 'high' : history.length > 0 ? 'medium' : 'low',\n            hadBotPrefix: true\n        },\n        \n        // Configura√ß√µes para IA\n        aiConfig: {\n            temperature: 0.8, // Mais criativo e natural\n            maxTokens: 500,   // Respostas concisas como WhatsApp\n            presencePenalty: 0.6, // Evitar repeti√ß√µes\n            frequencyPenalty: 0.4  // Variar vocabul√°rio\n        }\n    }\n};\n\n// ===================================================================\n// FUN√á√ïES AUXILIARES\n// ===================================================================\n\nfunction analyzeHistory(history) {\n    if (!history || history.length === 0) {\n        return { tone: 'neutro', topics: [], sentiment: 'neutro' };\n    }\n    \n    const texts = history.map(msg => msg.text.toLowerCase());\n    const allText = texts.join(' ');\n    \n    // An√°lise de tom\n    let tone = 'neutro';\n    if (allText.includes('kkk') || allText.includes('haha') || allText.includes('üòÇ')) {\n        tone = 'descontra√≠do';\n    } else if (allText.includes('obrigad') || allText.includes('por favor')) {\n        tone = 'formal';\n    } else if (allText.includes('amor') || allText.includes('‚ù§Ô∏è')) {\n        tone = 'carinhoso';\n    }\n    \n    // T√≥picos recorrentes (palavras-chave)\n    const topics = [];\n    if (allText.includes('trabalho') || allText.includes('job')) topics.push('trabalho');\n    if (allText.includes('fam√≠lia') || allText.includes('pai') || allText.includes('m√£e')) topics.push('fam√≠lia');\n    if (allText.includes('amor') || allText.includes('relacionamento')) topics.push('relacionamento');\n    if (allText.includes('projeto') || allText.includes('c√≥digo')) topics.push('tecnologia');\n    \n    return { tone, topics, sentiment: tone };\n}\n\nfunction determineRelationshipType(name, history) {\n    if (!history || history.length === 0) return 'novo contato';\n    \n    const allText = history.map(msg => msg.text.toLowerCase()).join(' ');\n    \n    if (allText.includes('amor') || allText.includes('‚ù§Ô∏è') || allText.includes('querido')) {\n        return 'relacionamento √≠ntimo';\n    } else if (allText.includes('trabalho') || allText.includes('projeto') || allText.includes('reuni√£o')) {\n        return 'contato profissional';\n    } else if (allText.includes('fam√≠lia') || name.toLowerCase().includes('m√£e') || name.toLowerCase().includes('pai')) {\n        return 'fam√≠lia';\n    } else if (history.length > 10) {\n        return 'amigo pr√≥ximo';\n    } else {\n        return 'conhecido';\n    }\n}\n\nfunction summarizeHistory(history) {\n    if (!history || history.length === 0) return 'Nenhum hist√≥rico anterior';\n    \n    const recentMessages = history.slice(-5);\n    const topics = recentMessages.map(msg => msg.text).join('. ');\n    \n    return `√öltimos t√≥picos discutidos: ${topics.substring(0, 200)}...`;\n} "
      },
      "id": "20ed24e5-a845-4613-95f3-8e4c9d8644ca",
      "name": "Processar Mensagem",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "return {\n  json: {\n    to: $('Processar Mensagem').first().json.toName,\n    response: $input.first().json.text,\n  }\n};"
      },
      "id": "6e7e3eee-fe16-4fb1-9b2a-30315cd48c0f",
      "name": "Processar IA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        40,
        100
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        200
      ],
      "id": "5ae6836d-0ea3-4788-9657-262144861c98",
      "name": "When chat message received",
      "webhookId": "8fcf778c-c5a8-4c87-a948-e808c59d8a8a"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ JSON.stringify($json.contextMessages) }}\n{{ $json.metadata }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -340,
        100
      ],
      "id": "9e2cf26b-110a-4a1b-b83d-f5eb40570795",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -252,
        320
      ],
      "id": "4219ab64-242f-45cb-81bb-67df5fac0677",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "P26lu03pCrIBm7fq",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.21.162.67:3000/send",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=message",
              "value": "={{ $json.response }}"
            },
            {
              "name": "to",
              "value": "={{ $('Processar Mensagem').item.json.to }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a81c8db6-ddf8-4d6d-82d6-6fcff839ec2a",
      "name": "Enviar Resposta1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        256,
        100
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "OK",
        "options": {}
      },
      "id": "0c2390f1-e35e-45c2-9500-af090d2b34aa",
      "name": "Resposta Webhook1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        476,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e7fa8d23-d1d2-4603-8deb-df781f069901",
              "leftValue": "={{ $json.shouldProcessAI }}",
              "rightValue": "=true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -560,
        0
      ],
      "id": "9b267b62-96d0-47f4-91fc-47d9d238e560",
      "name": "If"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook WhatsApp": {
      "main": [
        [
          {
            "node": "Processar Mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Mensagem": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar IA": {
      "main": [
        [
          {
            "node": "Enviar Resposta1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Processar IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Resposta1": {
      "main": [
        [
          {
            "node": "Resposta Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "84fab6df-ad45-42a5-b897-1d36826d9106",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b4b35a51d99b3f913ca0cb1b8b6d913dbb04a2435b646a560aee5e09482599dc"
  },
  "id": "iylWHjrDSSH0wxWV",
  "tags": []
}